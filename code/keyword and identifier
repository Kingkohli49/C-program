#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>

#define MAX_LENGTH 50

const char* keywords[]={"if","char","break","do","else","float","for","continue","int","long","return","static","sizeof","switch","void","while"};
int no_keywords=sizeof(keywords)/sizeof(keywords[0]);

FILE *identifierFile;
FILE *keywordFile;
FILE *operatorFile;
FILE *separatorFile;
FILE *numberFile;

int isKeyword(char *sample){
    for(int i=0;i<no_keywords;i++){
        if(strcmp(keywords[i],sample)==0){
            return 1;
        }
    }
    return 0;
}
int isOperator(char ch){
    char operators[]="+-*/<>=";
    for(int i=0;i<strlen(operators);i++){
        if(ch==operators[i]){
            return 1;
        }
    }
    return 0;
}
int isSeparator(char ch){
    char sep[]="(){};";
    for(int i=0;i<strlen(sep);i++){
        if(ch==sep[i]){
            return 1;
        }
    }
    return 0;
}


void lexical_Analyzer(const char *input){
    identifierFile=fopen("identifierFile.txt","w");
    keywordFile=fopen("keywordFile.txt","w");
    operatorFile=fopen("operatorFile.txt","w");
    separatorFile=fopen("separatorFile.txt","w");
    numberFile=fopen("numberFile.txt","w");

    char token[MAX_LENGTH];
    int i=0,j=0;
    while(input[i]!='\0'){
        if(isspace(input[i])){
            i++;
            continue;
        }

        if(input[i]=='/'&&input[i+1]=='/'){
            while(input[i]!='\n'&&input[i+1]!='\0'){
                i++;
            }
            i++;
            continue;
        }

        if(input[i]=='/'&&input[i+1]=='*'){
            i+=2;
            while(!(input[i] == '*' && input[i+1] == '/')){

                i++;
            }
            i+=2;
            continue;
        }

        if(isalpha(input[i])||input[i]=='_'){
            j=0;
            while(isalnum(input[i])||input[i]=='_'){
                token[j]=input[i];
                i++;
                j++;
            }
            token[j]='\0';
            if(isKeyword(token)){
                fprintf(keywordFile,"%s\n",token); 
            }else{
                fprintf(identifierFile,"%s\n",token);
            }
            continue;
        }

        if(isdigit(input[i])){
            j=0;
            while(isdigit(input[i])){
                token[j++]=input[i++];
            }
            token[j]='\0';
            fprintf(numberFile,"%s\n",token);
            continue;
        } 
        
        if(isOperator(input[i])){
            fprintf(operatorFile,"%c\n",input[i]);
            i++;
            continue;
        }

        if(isSeparator(input[i])){
            fprintf(separatorFile,"%c\n",input[i]);
            i++;
            continue;
        }
        i++;
    }
    
        fclose(identifierFile);
        fclose(keywordFile);
        fclose(operatorFile);
        fclose(separatorFile);
        fclose(numberFile);
}
int main(){
    const char *input=
       "/* Multi-line comment */ \n"
        "int main() { \n"
        "   // Single line comment\n"
        "   /* int x = 10; \n"
        "   int y = 5; \n"
        "   int sum = x+y; */\n"
        "   if(x>5) { \n"
        "   continue; }  \n"
        "   float y = 3.14; \n"
        "   while(true)"
        "   return 0; \n"
        "}"
        "int isKeyword(char *sample){ \n"
            "for(int i=0;i<no_keywords;i++){ \n"
                " if(strcmp(keywords[i],sample)==0){ \n"
                    "return 1; \n"
                "} \n"
            "} \n"
            "return 0;"
        "}";
    lexical_Analyzer(input);
}



// Identifiers ka code yaha se

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_LINE 1000

// List of C keywords
const char *keywords[] = {
    "auto", "break", "case", "char", "const", "continue", "default",
    "do", "double", "else", "enum", "extern", "float", "for", "goto",
    "if", "inline", "int", "long", "register", "restrict", "return",
    "short", "signed", "sizeof", "static", "struct", "switch", "typedef",
    "union", "unsigned", "void", "volatile", "while", "_Alignas",
    "_Alignof", "_Atomic", "_Bool", "_Complex", "_Generic", "_Imaginary",
    "_Noreturn", "_Static_assert", "_Thread_local"
};

int is_keyword(const char *word) {
    for (int i = 0; i < sizeof(keywords)/sizeof(keywords[0]); i++) {
        if (strcmp(word, keywords[i]) == 0)
            return 1;
    }
    return 0;
}

int is_valid_identifier(const char *str) {
    if (!(isalpha(str[0]) || str[0] == '_'))
        return 0;
    for (int i = 1; str[i] != '\0'; i++) {
        if (!(isalnum(str[i]) || str[i] == '_'))
            return 0;
    }
    return !is_keyword(str);
}

int main() {
    FILE *in, *out;
    char filename[100], line[MAX_LINE];
    int line_num = 0;

    printf("Enter the C program file name: ");
    scanf("%s", filename);

    in = fopen(filename, "r");
    if (!in) {
        perror("Failed to open input file");
        return 1;
    }

    out = fopen("identifier_output.txt", "w");
    if (!out) {
        perror("Failed to create output file");
        fclose(in);
        return 1;
    }

    printf("\n--- Identifier Checking Line by Line ---\n");
    while (fgets(line, sizeof(line), in)) {
        line_num++;
        char *token = strtok(line, " \t\n;(){}[]<>=+-*/%,\"'");
        printf("Line %d:\n", line_num);
        fprintf(out, "Line %d:\n", line_num);

        while (token != NULL) {
            if (is_valid_identifier(token)) {
                printf("   Valid Identifier: %s\n", token);
                fprintf(out, "   Valid Identifier: %s\n", token);
            } else {
                printf("   Invalid Identifier: %s\n", token);
                fprintf(out, "   Invalid Identifier: %s\n", token);
            }
            token = strtok(NULL, " \t\n;(){}[]<>=+-*/%,\"'");
        }
    }

    fclose(in);
    fclose(out);
    printf("\n Check 'identifier_output.txt' for output.\n");

    return 0;
}

